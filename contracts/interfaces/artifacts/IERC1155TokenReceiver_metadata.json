{
	"compiler": {
		"version": "0.8.11+commit.d7f03943"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.         This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s). This function MUST revert if it rejects the transfer(s). Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.",
					"params": {
						"_data": "Additional data with no specified format",
						"_from": "The address which previously owned the token",
						"_ids": "An array containing ids of each token being transferred (order and length must match _values array)",
						"_operator": "The address which initiated the batch transfer (i.e. msg.sender)",
						"_values": "An array containing amounts of each token being transferred (order and length must match _ids array)"
					},
					"returns": {
						"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`"
					}
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.         This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer. This function MUST revert if it rejects the transfer. Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.",
					"params": {
						"_data": "Additional data with no specified format",
						"_from": "The address which previously owned the token",
						"_id": "The ID of the token being transferred",
						"_operator": "The address which initiated the transfer (i.e. msg.sender)",
						"_value": "The amount of tokens being transferred"
					},
					"returns": {
						"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"notice": "Handle the receipt of multiple ERC1155 token types."
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"notice": "Handle the receipt of a single ERC1155 token type."
				}
			},
			"notice": "Note: The ERC-165 identifier for this interface is 0x4e2312e0.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Solidity Development/SQNetDiamond/Contracts/interfaces/IERC1155TokenReceiver.sol": "IERC1155TokenReceiver"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200000
		},
		"remappings": []
	},
	"sources": {
		"Solidity Development/SQNetDiamond/Contracts/interfaces/IERC1155TokenReceiver.sol": {
			"keccak256": "0x27a0424cbfa3a84a792731c87d1c385a78357757f50cc8ca7e56365caf7680d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b9c6c37181d8fea5c751daa698066ba5c65de4847608afe1393591b7ed8817f",
				"dweb:/ipfs/QmdVJ8WwdX4HV1gN3J5j9RoQqpSCtTftq91YDraDVx1N5n"
			]
		}
	},
	"version": 1
}